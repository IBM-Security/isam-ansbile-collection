# main task to create federations
#   Example: OIDC connect provider
#     federations:
#       - name: oidc-provider
#         protocol: OIDC
#         role: ibm.isam.op
#         configuration:
#           issuerIdentifier: https://oidc/test
#           signatureAlgorithm: RS256
#           signingKeystore: oidc_provider_keys
#           signingKeyLabel: OpenIdConnectProvider-nonProd
#           authorizationCodeLength: "30"
#           refreshTokenLength: "50"
#           accessTokenLength: "40"
#           authorizationCodeLifetime: "30"
#           accessTokenLifetime: "7200"
#           authorizationGrantLifetime: "604800"
#           idTokenLifetime: "7200"
#           grantTypesSupported:
#               - implicit
#           identityMapping:
#             activeDelegateId: default-map
#             properties:
#               identityMappingRuleReference: "5"
- name: Create federations
  ibm.isam.isam:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    action: ibmsecurity.isam.fed.federations.set
    isamapi: "{{
          { 'name': item.name }
          | combine({ 'protocol': item.protocol } if (item.protocol is defined) else {})
          | combine({ 'role': item.role } if (item.role is defined) else {})
          | combine({ 'configuration': item.configuration } if (item.configuration is defined) else {})
    }}"
  with_items: "{{ federations }}"
  when: item.name == fed_name
  notify: Commit Changes
  loop_control:
    label: "{u'name': u'{{ item.name }}'}"
