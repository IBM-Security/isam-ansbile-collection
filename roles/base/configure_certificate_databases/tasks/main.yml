---
# main task to configure certificate databases
- name: Help INFO (-e help=true)
  ansible.builtin.pause:
    echo: true
    prompt: |
      NAME
        configure_certificate_databases

      DESCRIPTION
        Role to configure certificate databases

      STEPS
        1) Configure certificate databases
        2) Commit changes

      EXAMPLES
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml // configure all certificate databases from inventory
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e cert_dbase_id=pdsrv // configure only certificate databases from inventory for pdsrv.kdb

        // filter for specific action from a single inventory at runtime
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=get_all
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=get
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=create
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=delete
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=export_db
        ansible-playbook -i [...] ibm.isam.base.configure_certificate_databases.yml -e db_action=import_db

      INVENTORY
      ==========
      # configure multiple certificate databases
      certificate_databases:
        # Get list of all certificate databases
        - db_action: get_all
        # Retrieving the SSL certificate database details
        - db_action: get
          cert_dbase_id: pdsrv
        # Create a certificate database
        - db_action: create
          kdb_name: Registry_Keystore
          # Following parameters are available but optional
          #> type: kdb # optional, Default=kdb
          #> token_label: None
          #> passcode: None
          #> hsm_type: None
          #> ip: None
          #> port: None
          #> kneti_hash: None
          #> esn: None
          #> rfs: None
          #> rfs_port: None
          #> rfs_auth: None
          #> safenet_pw: None
        # Delete a certificate database
        - db_action: delete
          cert_dbase_id: Registry_Keystore
        # Export a certificate database
        - db_action: export_db
          cert_id: Registry_Keystore
          filename: files/ssl/Registry_Keystore.zip
        # Import certificate database from KDB and Stash file
        - db_action: import_db
          kdb: files/ssl/Registry_Keystore.kdb
          stash: files/ssl/Registry_Keystore.sth
        # Import certificate database from ZIP file
        - db_action: import_db
          kdb: Registry_Keystore.kdb  # required relative path + filename inside the ZIP
          stash: Registry_Keystore.sth # required relative path + filename inside the ZIP
          zip: files/ssl/Registry_Keystore.zip # file containing KDB and Stash file above
        # Rename a certificate database
        - db_action: rename
          cert_id: Registry_Keystore
          new_name: New_Registry_Keystore
        # Set description for a certificate database
        - db_action: set
          cert_id: New_Registry_Keystore
          description: This is my new Keystore for all registries
      ==========

      INTERACTION
        ENTER         = continue
        Ctrl+C + 'C'  = continue
        Ctrl+C + 'A'  = abort
  when: help is defined

- name: Configure certificate databases [-e db_action=[get_all|get|create|delete|export_db|import_db|rename|set]]
  ibm.isam.isam:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    action: ibmsecurity.isam.base.ssl_certificates.certificate_databases.{{ item.db_action }}
    isamapi: "{{ {} | combine({ 'cert_dbase_id': item.cert_dbase_id } if (item.cert_dbase_id is defined) else {}) | combine({ 'kdb_name': item.kdb_name } if (item.kdb_name
      is defined) else {}) | combine({ 'type': item.type } if (item.type is defined) else {}) | combine({ 'token_label': item.token_label } if (item.token_label is
      defined) else {}) | combine({ 'passcode': item.passcode } if (item.passcode is defined) else {}) | combine({ 'hsm_type': item.hsm_type } if (item.hsm_type is
      defined) else {}) | combine({ 'ip': item.ip } if (item.ip is defined) else {}) | combine({ 'port': item.port } if (item.port is defined) else {}) | combine({
      'kneti_hash': item.kneti_hash } if (item.kneti_hash is defined) else {}) | combine({ 'esn': item.esn } if (item.esn is defined) else {}) | combine({ 'rfs':
      item.rfs } if (item.rfs is defined) else {}) | combine({ 'rfs_port': item.rfs_port } if (item.rfs_port is defined) else {}) | combine({ 'rfs_auth': item.rfs_auth
      } if (item.rfs_auth is defined) else {}) | combine({ 'safenet_pw': item.safenet_pw } if (item.safenet_pw is defined) else {}) | combine({ 'kdb_name': item.kdb_name
      } if (item.kdb_name is defined) else {}) | combine({ 'cert_id': item.cert_id } if (item.cert_id is defined) else {}) | combine({ 'new_name': item.new_name }
      if (item.new_name is defined) else {}) | combine({ 'description': item.description } if (item.description is defined) else {}) | combine({ 'filename': homedir+'/'+item.filename
      } if (item.filename is defined) else {}) | combine({ 'kdb': homedir+'/'+item.kdb } if (item.kdb is defined) else {}) | combine({ 'stash': homedir+'/'+ item.stash
      } if (item.stash is defined) else {}) | combine({ 'zip': homedir +'/'+ item.zip } if (item.zip is defined) else {}) }}"
  loop: "{{ certificate_databases }}"
  when:
    - item.db_action == db_action
  notify: Commit Changes
