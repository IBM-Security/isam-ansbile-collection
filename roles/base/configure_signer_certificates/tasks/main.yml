---

# main task to configure signer certificates

- name: Help INFO (-e help=true)
  pause:
    echo: yes
    prompt: |
      NAME
        configure_signer_certificates

      DESCRIPTION
        Role to configure signer certificates

      STEPS
        1) Configure signer certificates
        2) Commit changes

      EXAMPLES
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml // configure all signer certificates from inventory
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e kdb_id=pdsrv // configure only signer certificates from inventory for pdsrv.kdb
        
        // filter for specific action from a single inventory at runtime
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=get_all
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=get
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=import_cert
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=export_cert
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=load
        ansible-playbook -i [...] playbooks/ansible_collections/base/configure_signer_certificates.yml -e cert_action=delete

      INVENTORY
      ==========
      # configure multiple signer certificates
      signer_certificates:
        # import multiple signer certificates
        - cert_action: import_cert
          kdb_id: lmi_trust_store
          cert: files/ssl/lmi.crt # absolute or relative path supported
          label: sample_label
        # get all certificates from keystore
        - cert_action: get_all
          kdb_id: pdsrv
        # get content of a specific certificate from keystore
        - cert_action: get
          kdb_id: pdsrv
          cert_id: sample_label
        # load public key into keystore
        - cert_action: load
          kdb_id: pdsrv
          label: runtime
          server: localhost
          port: 443
          check_remote: False # check_remote controls if ansible should check remote certificate by retrieving it or simply by checking for existence of the label in the kdb
        # export a certificate to local directory
        - cert_action: export_cert
          kdb_id: pdsrv
          cert_id: runtime
          filename: files/ssl/runtime.cert # absolute or relative path supported
        # delete a specific sidgner certificate from keystore
        - cert_action: delete
          kdb_id: pdsrv
          cert_id: runtime
      ==========

      INTERACTION
        ENTER         = continue
        Ctrl+C + 'C'  = continue
        Ctrl+C + 'A'  = abort
  when: help is defined

- name: "Configure signer certificates [-e cert_action=[import_cert] -e kdb_id=<kdb>]"
  ibm.isam.isam:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    action: "ibmsecurity.isam.base.ssl_certificates.signer_certificate.{{ item.cert_action }}"
    isamapi: "{{
      { 'kdb_id': item.kdb_id }
      | combine({ 'label': item.label } if (item.label is defined) else {})
      | combine({ 'cert': item.cert if((item.cert | regex_search('^/')) == '/') else (inventory_dir +'/'+ item.cert) } if (item.cert is defined) else {})
      | combine({ 'cert_id': item.cert_id } if (item.cert_id is defined) else {})
      | combine({ 'server': item.server } if (item.server is defined) else {})
      | combine({ 'port': item.port } if (item.port is defined) else {})
      | combine({ 'check_remote': item.check_remote } if (item.check_remote is defined) else {})
      | combine({ 'filename': item.filename if((item.filename | regex_search('^/')) == '/') else (inventory_dir +'/'+ item.filename) } if (item.filename is defined) else {})
    }}"
  loop: "{{ signer_certificates }}"
  when:
    - item.cert_action == cert_action
    - item.kdb_id == kdb_id
  notify: Commit Changes
