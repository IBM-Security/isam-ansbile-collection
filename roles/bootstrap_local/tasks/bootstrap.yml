---
# subtask file for isam-local-bootstrap
- name: Check the ISAM ISO file exists
  ansible.builtin.stat:
    path: "{{ bootstrap_local_appliance_iso }}"
  register: isofile
  failed_when: not isofile.stat.exists

- name: Debug exists
  ansible.builtin.debug:
    var: isofile.stat.exists

- name: Check if the target VM directory exists
  ansible.builtin.stat:
    path: "{{ bootstrap_local_vm_path_root }}/{{ bootstrap_local_vm_hostname }}{{ bootstrap_local_vm_dir_suffix }}"
  register: vmdir
  ignore_errors: true

- name: Delete if the target VM directory exists
  ansible.builtin.file:
    path: "{{ bootstrap_local_vm_dest_dir }}"
    state: absent
  when: vmdir.stat.exists

- name: Create target VM directory
  ansible.builtin.file:
    path: "{{ bootstrap_local_vm_dest_dir }}"
    state: directory
    mode: '0755'
  register: shell_out

- name: Debug
  ansible.builtin.debug:
    var: shell_out

- name: Copy vmx file to target VM directory
  ansible.builtin.template:
    src: "{{ role_path }}/templates/isam9_sample.vmx"
    dest: "{{ bootstrap_local_vm_vmx }}"
  register: cmd_out

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Create VM disk
  ansible.builtin.command: "{{ bootstrap_local_vmdiskmgr }} -c -a lsilogic -s {{ bootstrap_local_vm_hdd_size }}GB -t 0 {{ bootstrap_local_vm_vmdk }}"
  register: cmd_out
  changed_when: true

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Install ISAM ISO from image {{ bootstrap_local_appliance_iso }}
  ansible.builtin.command: "{{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} start {{ bootstrap_local_vm_vmx }}"
  register: shell_out
  changed_when: true

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out

- name: Waiting for VM to install isam image and shutdown
  ansible.builtin.shell: |
    set -o pipefail && while ( {{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} list | grep -q {{ bootstrap_local_vm_vmx }} );
    do echo -n . ;
    sleep 1;
    done
  register: shell_out

- name: Wait for VM process to end
  ansible.builtin.shell: set -o pipefail && while ( ps -ef | grep {{ bootstrap_local_vm_vmx }} | grep -q -v grep ); do echo -n . ; sleep 1; done
  register: shell_out
  changed_when: false

- name: Check tmp dir
  ansible.builtin.stat:
    path: "{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata"
  register: tmpdir
  ignore_errors: true

- name: Clean tmp dir and file
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata"
    - "{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata.iso"
  when: tmpdir.stat.exists

- name: Create tmp dir
  ansible.builtin.file:
    path: "{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata"
    state: directory
    mode: '0755'
  register: shell_out

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out

- name: Copy template
  ansible.builtin.template:
    src: "{{ role_path }}/templates/app-metadata"
    dest: "{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata"
    mode: '0755'
  register: cmd_out

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Create metadata ISO
  ansible.builtin.shell: "{{ bootstrap_local_mkisofs }} {{ bootstrap_local_mkisoflags }} {{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata.iso {{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata >/dev/null
    2>&1"
  register: shell_out
  changed_when: true

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out

- name: Replace the ISO image file entry in vmx
  ansible.builtin.lineinfile:
    dest: "{{ bootstrap_local_vm_vmx }}"
    regexp: ^sata0:1.fileName
    line: sata0:1.fileName="{{ bootstrap_local_tmpdir }}/{{ bootstrap_local_vm_hostname }}-metadata.iso"
    backrefs: true
  register: cmd_out

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Boot up again with bootstrap ISO
  ansible.builtin.command: "{{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} start {{ bootstrap_local_vm_vmx }}"
  register: shell_out
  changed_when: true

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out

- name: Wait for LMI up
  ansible.builtin.command: curl -k -v -s -u "admin:admin" -H "Accept:application/json" https://"{{ bootstrap_local_vm_mgmt_ip }}"
  register: result
  until: result.stdout.find("302 Found") != -1
  retries: 50
  delay: 5
  changed_when: false

- name: Take care of vmx file to remove ISO image
  ansible.builtin.lineinfile:
    dest: "{{ bootstrap_local_vm_vmx }}"
    regexp: '^sata0:1.present'
    line: 'sata0:1.present="FALSE"'
    backrefs: true
  register: cmd_out

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Take care of vmx file to remove ISO image
  ansible.builtin.lineinfile:
    dest: "{{ bootstrap_local_vm_vmx }}"
    regexp: '^sata0:1.fileName'
    line: 'sata0:1.fileName='
    backrefs: true
  register: cmd_out

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out

- name: Take care of vmx file to remove ISO image
  ansible.builtin.lineinfile:
    dest: "{{ bootstrap_local_vm_vmx }}"
    regexp: '^sata0:1.startConnected'
    line: 'sata0:1.startConnected=FALSE'
    backrefs: true
  register: cmd_out

- name: Debug cmd_out
  ansible.builtin.debug:
    var: cmd_out

- name: Take a snapshot as baseline
  ansible.builtin.command: "{{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} snapshot {{ bootstrap_local_vm_vmx }} baseline"
  register: shell_out
  changed_when: true

- name: Debug shell_out
  ansible.builtin.debug:
    var: shell_out
