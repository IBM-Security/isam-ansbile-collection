---
# - name: Tasks file for bootstrap_local
#   ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Check if there is a vm with the destination name already exist
  ansible.builtin.stat:
    path: "{{ bootstrap_local_vm_path_root }}/{{ bootstrap_local_vm_hostname }}{{ bootstrap_local_vm_dir_suffix }}/{{ bootstrap_local_vm_hostname }}.vmx"
  register: vmxfile
  ignore_errors: true # noqa: ignore-errors

- name: Debug
  ansible.builtin.debug:
    var: vmxfile

- name: Bootstrap a new vm if vmx file does not exist
  ansible.builtin.include_tasks: bootstrap.yml
  when:
    - not vmxfile.stat.exists

- name: Check if there is a vm with the destination name already running
  ansible.builtin.shell: |
    set -o pipefail && \
    {{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} list | \
    grep -q {{ bootstrap_local_vm_path_root }}/{{ bootstrap_local_vm_hostname }}{{ bootstrap_local_vm_dir_suffix }}/{{ bootstrap_local_vm_hostname }}.vmx
  changed_when: false
  register: shell_out
  ignore_errors: true

- name: Debug
  ansible.builtin.debug:
    var: shell_out

- name: Set fact about target vm running
  ansible.builtin.set_fact:
    vm_running: true
  when: shell_out.rc == 0

- name: Debug vm_running
  ansible.builtin.debug:
    var: vm_running

# start the vm if it is not running
- name: If vmx file exists but it is not running, start it up
  ansible.builtin.command: "{{ bootstrap_local_vmrun }} {{ bootstrap_local_vmrunflags }} start {{ bootstrap_local_vm_vmx }}"
  register: shell_out
  changed_when: false
  when: vm_running is not defined

- name: Debug
  ansible.builtin.debug:
    var: shell_out

- name: Wait for system up, the speed depends on whether cold start or resume
  ansible.builtin.wait_for:
    host: "{{ bootstrap_local_vm_mgmt_ip }}"
    port: 443
    delay: 5
    state: started
  when: vm_running is not defined
