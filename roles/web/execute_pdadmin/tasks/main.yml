---

# main task to execute pdadmin commands

- name: Help INFO (-e help=true)
  pause:
    echo: yes
    prompt: |
      NAME
        execute_pdadmin

      DESCRIPTION
        Role to execute pdadmin commands

      STEPS
        1) Merge pdadmin commands (only if enable_ansible_merge_vars=True)
        2) Execute pdadmin commands
        3) Pretty print Output of PDAdmin command execution

      EXAMPLES
        ansible-playbook -i [...] playbooks/ansible_collections/web/execute_pdadmin.yml
        ansible-playbook -i [...] playbooks/ansible_collections/web/execute_pdadmin.yml --check -vvv \\ review pdadmin command to be executed on a per host base without executing them
        ansible-playbook -i [...] playbooks/ansible_collections/web/execute_pdadmin.yml -e enable_ansible_merge_vars=True \\merging pdadmin_commands before execution (see INVENTORY section for details)

      INVENTORY
      ==========
      # execute pdadmin commands
      # Attention: 
      #  - order is important !
      #  - last command should be successful in order to see full command output. Faild commands might produce only stack trace from ansible execution.
      pdadmin_commands:
        - user list * 10
        - server list
        - "user create testuser1 uid=testuser1,dc=iswga testuser1 testuser1 {{ '{{' }} testuser1_password {{ '}}' }}"
        - help
        - exit
      
      # sample for merging pdadmin_commands with mergin_vars action plugin (-e enable_ansible_merge_vars=True)
      # Need additional python package: pip install ansible_merge_vars (https://pypi.org/project/ansible-merge-vars)
      # sample hosts file content:
      #  [isva]
      #  isva-1.ibm.com
      # group_vars/isva.yml:
      1_level_pdadmin_commands__to_merge:
        - user list * 10
        - server list
      # host_vars/isva-1.ibm.com.yml:
      2_level_pdadmin_commands__to_merge:
        - "user create testuser1 uid=testuser1,dc=iswga testuser1 testuser1 {{ '{{' }} testuser1_password {{ '}}' }}"
        - help
        - exit
      # Note that the variables get merged in alphabetical order of their names, with values from later dicts replacing values from earlier dicts.
      # E.g. example will produce pdadmin_commands at runtime
      #  pdadmin_commands:
      #   - user list * 10
      #   - server list
      #   - "user create testuser1 uid=testuser1,dc=iswga testuser1 testuser1 {{ '{{' }} testuser1_password {{ '}}' }}"
      #   - help
      #   - exit
      ==========

      INTERACTION
        ENTER         = continue
        Ctrl+C + 'C'  = continue
        Ctrl+C + 'A'  = abort
  when: help is defined

- name: Merge pdadmin_commands [ -e enable_ansible_merge_vars=True ! requires python module > pip install ansible-merge-vars ]
  merge_vars:
   suffix_to_merge: pdadmin_commands__to_merge
   merged_var_name: pdadmin_commands
   dedup: false
   expected_type: 'list'
  when: (enable_ansible_merge_vars | bool)

- name: Run PDAdmin commands
  ibm.isam.isamadmin:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    isamuser: "{{ admin_id }}"
    isampwd: "{{ admin_pwd }}"
    isamdomain: "{{ admin_domain }}"
    commands: "{{ pdadmin_commands }}"
  ignore_errors: yes
  register: ret_obj

- name: Output of PDAdmin command execution
  debug: msg="{{ ret_obj['data']['result'].split('\n') }}"
  when: 
    - not ansible_check_mode
    - ret_obj is defined and ret_obj is succeeded and ('result' in ret_obj.data)
